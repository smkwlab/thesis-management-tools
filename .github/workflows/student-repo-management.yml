---
name: Student Repository Management
"on":
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all registries'
        required: false
        default: 'false'
        type: boolean

jobs:
  manage-repositories:
    runs-on: ubuntu-latest
    # リポジトリ登録依頼のIssueのみで実行
    if: >
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.issue.title || '', 'リポジトリ登録依頼')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Checkout thesis-student-registry
        uses: actions/checkout@v4
        with:
          repository: smkwlab/thesis-student-registry
          path: thesis-student-registry
          token: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          type -p gh >/dev/null || (
            curl -fsSL \
              https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
              sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) \
              signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
              https://cli.github.com/packages stable main" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh jq
          )
          # GitHub CLI認証確認とトークン権限検証
          echo "Verifying GitHub CLI authentication..."
          gh auth status
          echo "Validating token permissions..."

          # より正確なトークン使用検出
          if [ -n "${{ secrets.ORG_ADMIN_TOKEN }}" ] && \
             [ "$GH_TOKEN" = "${{ secrets.ORG_ADMIN_TOKEN }}" ]; then
            echo "✅ Using ORG_ADMIN_TOKEN for enhanced permissions"
            echo "TOKEN_TYPE=ORG_ADMIN" >> "$GITHUB_ENV"
          else
            echo "⚠️ Using GITHUB_TOKEN (limited permissions)"
            echo "Note: Cross-repository operations may fail" \
                 "without ORG_ADMIN_TOKEN"
            echo "Consider setting ORG_ADMIN_TOKEN secret" \
                 "for full functionality"
            echo "TOKEN_TYPE=GITHUB_DEFAULT" >> "$GITHUB_ENV"
          fi

      - name: Process repository request
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            # 単一Issue処理
            echo "🎯 単一Issue処理モード"
            echo "Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"

            # process-pending-issues.shを使用してIssue処理
            # 制限を1件に設定して該当Issueのみ処理
            if bash scripts/process-pending-issues.sh --limit 1; then
              echo "✅ Issue処理完了"
              echo "PROTECTION_SUCCESS=true" >> "$GITHUB_ENV"

              # 学生ID抽出（環境変数設定用）
              student_id=$(echo "$ISSUE_BODY" | grep -oE 'k[0-9]{2}(rs|jk|gjk)[0-9]+' | head -1 || true)
              if [ -n "$student_id" ]; then
                echo "STUDENT_ID=$student_id" >> "$GITHUB_ENV"
              fi

              # リポジトリタイプ判定
              issue_title="${{ github.event.issue.title }}"
              if [[ "$issue_title" == *"-wr"* ]]; then
                echo "REPO_TYPE=wr" >> "$GITHUB_ENV"
              elif [[ "$issue_title" == *"-sotsuron"* ]]; then
                echo "REPO_TYPE=sotsuron" >> "$GITHUB_ENV"
              elif [[ "$issue_title" == *"-thesis"* ]]; then
                echo "REPO_TYPE=thesis" >> "$GITHUB_ENV"
              fi
            else
              echo "❌ Issue処理失敗"
              echo "PROTECTION_SUCCESS=false" >> "$GITHUB_ENV"
            fi
          else
            # 一括処理モード
            echo "📋 一括処理モード"
            if bash scripts/process-pending-issues.sh; then
              echo "✅ 一括処理完了"
              echo "PROTECTION_SUCCESS=true" >> "$GITHUB_ENV"
            else
              echo "❌ 一括処理失敗"
              echo "PROTECTION_SUCCESS=false" >> "$GITHUB_ENV"
            fi
          fi

      - name: Summary
        if: env.PROTECTION_SUCCESS == 'true'
        run: |
          echo "✅ 処理完了サマリー"
          echo "処理されたIssue: #${{ github.event.issue.number }}"
          echo "学生ID: ${{ env.STUDENT_ID }}"
          echo "リポジトリタイプ: ${{ env.REPO_TYPE }}"
          echo "完了時刻: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo
          echo "📋 process-pending-issues.sh が以下の処理を完了:"
          echo "  - リポジトリ存在確認"
          echo "  - ブランチ保護設定 (論文リポジトリのみ)"
          echo "  - thesis-student-registry 更新"
          echo "  - Issue クローズ"
