---
name: Student Repository Management
"on":
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all registries'
        required: false
        default: 'false'
        type: boolean

jobs:
  manage-repositories:
    runs-on: ubuntu-latest
    # ブランチ保護設定依頼のIssueのみで実行
    if: >
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.issue.title || '', 'ブランチ保護設定依頼')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        run: |
          type -p gh >/dev/null || (
            curl -fsSL \
              https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
              sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) \
              signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
              https://cli.github.com/packages stable main" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          )

      - name: Extract student info from issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 未処理Issueから学生情報を抽出中..."
          ./scripts/extract-student-info-from-issues.sh

      - name: Setup branch protection
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔒 ブランチ保護設定を実行中..."
          if [ "${{ github.event_name }}" = "issues" ]; then
            # Issue作成時：該当学生のブランチ保護を即座に設定
            student_id=$(echo "${{ github.event.issue.body }}" | grep -oE 'k[0-9]{2}[rg][sjk][0-9]+' | head -1 || true)
            if [ -n "$student_id" ]; then
              echo "🎯 Issue作成による即座のブランチ保護設定: $student_id"
              if ./scripts/setup-branch-protection.sh "$student_id"; then
                echo "✅ ブランチ保護設定完了: $student_id"
                echo "PROTECTION_SUCCESS=true" >> $GITHUB_ENV
                echo "STUDENT_ID=$student_id" >> $GITHUB_ENV
              else
                echo "❌ ブランチ保護設定失敗: $student_id"
                echo "PROTECTION_SUCCESS=false" >> $GITHUB_ENV
              fi
            else
              echo "⚠️ 学生IDを抽出できませんでした"
              echo "Issue本文: ${{ github.event.issue.body }}"
              echo "PROTECTION_SUCCESS=false" >> $GITHUB_ENV
            fi
          else
            # 手動実行時：一括処理
            echo "📋 一括ブランチ保護設定を実行中..."
            ./scripts/bulk-setup-protection.sh
            echo "PROTECTION_SUCCESS=true" >> $GITHUB_ENV
          fi

      - name: Update student registry
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 学生レジストリを更新中..."
          ./scripts/update-student-registry.sh

      - name: Commit registry updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          if git diff --staged --quiet; then
            echo "📊 変更なし: レジストリは最新状態です"
          else
            git commit -m "Auto-update student registry and protection status

            - Extracted student info from issues
            - Updated branch protection status
            - Maintained yearly student classification"
            git push
            echo "📊 学生レジストリを更新しました"
          fi

      - name: Close completed issue
        if: github.event_name == 'issues' && env.PROTECTION_SUCCESS == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎯 ブランチ保護設定完了によるIssue自動クローズ"
          gh issue comment ${{ github.event.issue.number }} --body "✅ **ブランチ保護設定が自動完了しました**

          **設定内容:**
          - リポジトリ: ${{ github.event.issue.title }}
          - 学生ID: ${{ env.STUDENT_ID }}
          - 設定完了時刻: $(date '+%Y-%m-%d %H:%M:%S UTC')

          **保護されたブランチ:**
          - main ブランチ
          - review-branch ブランチ

          **保護ルール:**
          - 1つ以上の承認レビューが必要
          - 新しいコミット時に古いレビューを無効化  
          - フォースプッシュとブランチ削除を禁止

          論文執筆を開始できます！"
          
          gh issue close ${{ github.event.issue.number }} --reason completed
