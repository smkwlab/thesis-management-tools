---
name: Student Repository Management
"on":
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all registries'
        required: false
        default: 'false'
        type: boolean

jobs:
  manage-repositories:
    runs-on: ubuntu-latest
    # ブランチ保護設定依頼のIssueのみで実行
    if: >
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.issue.title || '', 'ブランチ保護設定依頼')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Checkout thesis-student-registry
        uses: actions/checkout@v4
        with:
          repository: smkwlab/thesis-student-registry
          path: thesis-student-registry
          token: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          type -p gh >/dev/null || (
            curl -fsSL \
              https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
              sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) \
              signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
              https://cli.github.com/packages stable main" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh jq
          )
          # GitHub CLI認証確認とトークン権限検証
          echo "Verifying GitHub CLI authentication..."
          gh auth status
          echo "Validating token permissions..."

          # より正確なトークン使用検出
          if [ -n "${{ secrets.ORG_ADMIN_TOKEN }}" ] && \
             [ "$GH_TOKEN" = "${{ secrets.ORG_ADMIN_TOKEN }}" ]; then
            echo "✅ Using ORG_ADMIN_TOKEN for enhanced permissions"
            echo "TOKEN_TYPE=ORG_ADMIN" >> "$GITHUB_ENV"
          else
            echo "⚠️ Using GITHUB_TOKEN (limited permissions)"
            echo "Note: Cross-repository operations may fail" \
                 "without ORG_ADMIN_TOKEN"
            echo "Consider setting ORG_ADMIN_TOKEN secret" \
                 "for full functionality"
            echo "TOKEN_TYPE=GITHUB_DEFAULT" >> "$GITHUB_ENV"
          fi

      - name: Extract student info from issues
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 未処理Issueから学生情報を抽出中..."
          bash scripts/extract-student-info-from-issues.sh

      - name: Setup branch protection
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "🔒 ブランチ保護設定を実行中..."
          echo "Token type: $TOKEN_TYPE"

          if [ "${{ github.event_name }}" = "issues" ]; then
            # Issue作成時：該当学生のブランチ保護を即座に設定
            student_id=$(echo "$ISSUE_BODY" | \
                         grep -oE 'k[0-9]{2}(rs|jk|gjk)[0-9]+' | \
                         head -1 || true)
            echo "Extracted student ID from issue:" \
                 "${student_id:-'(none found)'}"
            if [ -n "$student_id" ]; then
              echo "🎯 Issue作成による即座のブランチ保護設定: $student_id"

              # 権限チェック：GITHUB_TOKENでは制限される可能性を警告
              if [ "$TOKEN_TYPE" = "GITHUB_DEFAULT" ]; then
                echo "⚠️ 警告: GITHUB_TOKENを使用中。"
                echo "他リポジトリへのアクセスに制限がある可能性があります"
              fi

              # エラーハンドリング強化
              if bash scripts/setup-branch-protection.sh \
                      "$student_id" 2>&1; then
                echo "✅ ブランチ保護設定完了: $student_id"
                echo "PROTECTION_SUCCESS=true" >> "$GITHUB_ENV"
                echo "STUDENT_ID=$student_id" >> "$GITHUB_ENV"
              else
                exit_code=$?
                echo "❌ ブランチ保護設定失敗: $student_id" \
                     "(exit code: $exit_code)"
                echo "トークンタイプ: $TOKEN_TYPE"
                echo "使用中トークン: ${GH_TOKEN:0:8}..."
                echo "PROTECTION_SUCCESS=false" >> "$GITHUB_ENV"
                echo "ERROR_CODE=$exit_code" >> "$GITHUB_ENV"
              fi
            else
              echo "⚠️ 学生IDを抽出できませんでした"
              echo "Issue本文: ${ISSUE_BODY:-'(empty)'}"
              echo "PROTECTION_SUCCESS=false" >> "$GITHUB_ENV"
            fi
          else
            # 手動実行時：一括処理
            echo "📋 一括ブランチ保護設定を実行中..."
            if bash scripts/bulk-setup-protection.sh 2>&1; then
              echo "✅ 一括処理完了"
              echo "PROTECTION_SUCCESS=true" >> "$GITHUB_ENV"
            else
              exit_code=$?
              echo "❌ 一括処理失敗 (exit code: $exit_code)"
              echo "PROTECTION_SUCCESS=false" >> "$GITHUB_ENV"
              echo "ERROR_CODE=$exit_code" >> "$GITHUB_ENV"
            fi
          fi

      - name: Update student registry
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 学生レジストリを更新中..."
          bash scripts/update-student-registry.sh

      - name: Update thesis student registry
        if: env.PROTECTION_SUCCESS == 'true'
        run: |
          echo "📋 thesis-student-registry を更新中..."

          # thesis-student-registryの存在確認
          if [[ -d "thesis-student-registry" ]]; then
            echo "✅ thesis-student-registry found"

            # 最新の学生情報を取得
            completed_file="data/protection-status/completed-protection.txt"
            if [[ -f "$completed_file" ]]; then
              # 最新の完了エントリから学生IDを抽出
              latest_entry=$(tail -n 1 "$completed_file" 2>/dev/null || \
                            echo "")
              
              # 学生IDを抽出 (例: "k02jk059-sotsuron # Completed: ... Student: k02jk059" から "k02jk059")
              if [[ "$latest_entry" =~ Student:\ ([k][0-9]{2}(rs|jk|gjk)[0-9]+) ]]; then
                latest_student="${BASH_REMATCH[1]}"
              else
                # フォールバック: リポジトリ名から学生IDを抽出
                latest_student=$(echo "$latest_entry" | \
                               grep -oE '^k[0-9]{2}(rs|jk|gjk)[0-9]+' || echo "")
              fi

              if [[ -n "$latest_student" ]]; then
                echo "🎯 Processing latest completed student ID:" \
                     "$latest_student"
                echo "   From entry: $latest_entry"

                # 複数のリポジトリタイプを処理
                for repo_type in sotsuron ise-report1 ise-report2 wr; do
                  repo_name="${latest_student}-${repo_type}"
                  
                  echo "🔍 Checking repository: smkwlab/$repo_name"
                  
                  # リポジトリの存在確認（詳細エラー出力付き）
                  if gh_output=$(gh repo view "smkwlab/$repo_name" 2>&1); then
                    echo "📦 Found repository: $repo_name"

                    # thesis-student-registryを更新
                    cd thesis-student-registry
                    chmod +x update-repository-registry.sh
                    script_args=("$repo_name" "$latest_student" "$repo_type" \
                                 "completed")
                    if ./update-repository-registry.sh "${script_args[@]}" \
                       2>&1; then
                      echo "✅ Updated registry for: $repo_name"
                    else
                      echo "⚠️ Failed to update registry for: $repo_name"
                      echo "This may be normal if the repository" \
                           "type is not supported"
                    fi
                    cd ..
                  else
                    echo "❌ Repository not found or access denied: $repo_name"
                    echo "   Error: $gh_output"
                  fi
                done
              else
                echo "⚠️ No recent completed students found"
              fi
            else
              echo "⚠️ completed-protection.txt not found"
              echo "This is expected on first run or if no" \
                   "protections have been completed yet"
            fi
          else
            echo "⚠️ thesis-student-registry not found"
            echo "This is normal if repositories are in different locations"
          fi

      - name: Commit registry updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          if git diff --staged --quiet; then
            echo "📊 変更なし: レジストリは最新状態です"
          else
            git commit -m "Auto-update student registry and protection status

            - Extracted student info from issues
            - Updated branch protection status
            - Maintained yearly student classification"
            git push
            echo "📊 学生レジストリを更新しました"
          fi

      - name: Commit thesis student registry updates
        if: env.PROTECTION_SUCCESS == 'true'
        run: |
          # thesis-student-registryの変更をコミット
          if [[ -d "thesis-student-registry/.git" ]]; then
            cd thesis-student-registry

            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add data/students/repositories.json data/students/ || true

            if git diff --staged --quiet; then
              echo "📋 変更なし: thesis-student-registry は最新状態です"
            else
              # 現在処理中の学生IDを取得
              processed_student="${{ env.STUDENT_ID }}"
              if [[ -z "$processed_student" ]]; then
                # フォールバック: completed-protection.txtから取得
                processed_student=$(tail -n 1 \
                  ../data/protection-status/completed-protection.txt \
                  2>/dev/null || echo "unknown")
              fi

              commit_msg="Auto-update repository registry for student: \
              $processed_student

              - Added/updated repository information after branch protection \
              completion
              - Synchronized with thesis-management-tools workflow
              - Student: $processed_student
              - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              git commit -m "$commit_msg"

              git push
              echo "📋 thesis-student-registry を更新しました: $processed_student"
            fi
          else
            echo "📋 thesis-student-registry not available for commit"
          fi

      - name: Close completed issue
        if: github.event_name == 'issues' && env.PROTECTION_SUCCESS == 'true'
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run: |
          echo "🎯 ブランチ保護設定完了によるIssue自動クローズ"

          # コメント本文を作成
          comment_body="✅ ブランチ保護設定が自動完了しました

          設定内容:
          - リポジトリ: $ISSUE_TITLE
          - 学生ID: ${{ env.STUDENT_ID }}
          - 設定完了時刻: $(date '+%Y-%m-%d %H:%M:%S UTC')

          保護されたブランチ:
          - main ブランチ
          - review-branch ブランチ

          保護ルール:
          - 1つ以上の承認レビューが必要
          - 新しいコミット時に古いレビューを無効化
          - フォースプッシュとブランチ削除を禁止

          論文執筆を開始できます！"

          gh issue comment "$ISSUE_NUMBER" --body "$comment_body"
          gh issue close "$ISSUE_NUMBER" --reason completed
